{"version":3,"sources":["components/Navbar.js","TextForm.js","Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","wordArr","split","style","color","heading","value","rows","onChange","event","target","backgroundColor","length","newText","toUpperCase","showAlert","toLowerCase","copyText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","join","filter","word","Alert","alert","lower","toString","charAt","slice","capitalize","msg","defaultProps","menu","App","SetMode","_useState3","_useState4","SetAlertMode","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.eb3fff8b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href='/'>\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>                \r\n              </li>             \r\n            </ul>\r\n\r\n            <div className={`form-check form-switch  text-${props.mode===\"light\"?'dark':'light'} `}>\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Dark Mode \r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  titl: PropTypes.string,\r\n  menu: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \" Site Title\",\r\n  menu: \"Add menu text\",\r\n};\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClicked = () => {\r\n        // console.log(\"Button clicked\")\r\n        if (text.length>0){\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\")\r\n        }else{\r\n          props.showAlert(\"Enter Something\", \"warning\")\r\n        }\r\n    }\r\n\r\n    const handleLoClicked = () => {\r\n        // console.log(\"Button clicked\")\r\n        if (text.length>0){\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n      }else{\r\n        props.showAlert(\"Enter Something\", \"warning\")\r\n      }\r\n    }\r\n\r\n    const handleOnChnaged = (event) => {\r\n        // console.log(\"on changed\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleClrClicked = (event) => {\r\n      // console.log(\"on changed\")\r\n      setText(\"\")\r\n      props.showAlert(\"Clear\", \"success\")\r\n  }\r\n\r\n    const handleCopy = (event) => {\r\n      if (text.length>0){\r\n      var copyText = document.getElementById(\"exampleFormControlTextarea1\");\r\n      copyText.select();\r\n      copyText.setSelectionRange(0, 99999);\r\n      navigator.clipboard.writeText(copyText.value);\r\n      props.showAlert(\"Copied to Clipboard\", \"success\")\r\n    }else{\r\n      props.showAlert(\"Enter Something\", \"warning\")\r\n    }\r\n      // alert(\"Copied the text: \" + copyText.value);\r\n  }\r\n\r\n  const handleExtraSpaces = (event) =>{\r\n    if (text.length>0){\r\n    //const sentence = text.replace(/\\s+/g, ' ').trim()\r\n    let newText = text.split(/[  ]+/);    \r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Extra Spaces Removed\", \"success\")}\r\n    else{\r\n      props.showAlert(\"Enter Something\", \"warning\")\r\n    }\r\n  }\r\n    const [text,setText] = useState(\"\");\r\n    let wordArr = text.split(\" \")\r\n\r\n    \r\n  return (\r\n    <> \r\n      <div className=\"mb-3\" style={{color: props.mode==='light'?'#042743':'white'}}>\r\n        <h1 className=\"my-3\">{props.heading}</h1>\r\n        <textarea\r\n          className=\"form-control\"\r\n          value={text}\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"8\"\r\n          onChange={handleOnChnaged}\r\n          style={{\r\n            backgroundColor : props.mode === 'light'?'white':'grey',\r\n            color: props.mode === 'light'?'#042743':'white'\r\n          }}\r\n        ></textarea>\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary mx-1 my-2\" onClick={handleUpClicked}>\r\n            Convert to Uppercase\r\n      </button>\r\n\r\n      <button className=\"btn btn-primary mx-1  my-2\" onClick={handleLoClicked}>\r\n            Convert to Lowercase\r\n      </button>\r\n\r\n      <button className=\"btn btn-primary mx-1  my-2\" onClick={handleCopy}>\r\n            Copy Text\r\n      </button>\r\n\r\n      <button className=\"btn btn-primary mx-1  my-2\" onClick={handleClrClicked}>\r\n            Clear \r\n      </button>\r\n\r\n      <button className=\"btn btn-primary mx-1  my-2\" onClick={handleExtraSpaces}>\r\n            Remove Extra Space \r\n      </button>\r\n\r\n      <div className=\"container my-3\" style={{color: props.mode==='light'?'#042743':'white'}}>\r\n        <h2>Preview Text Summary</h2>\r\n        <p>{text.length >0?text:'No text Entered'}</p>\r\n        <p>Words: {wordArr.filter(word => word !== '').length} and Characters: {text.length} .</p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes to read.</p>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toString().toLowerCase();\r\n        return lower.toUpperCase().charAt(0) + lower.toLowerCase().slice(1);\r\n    }\r\n\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} `} role=\"alert\">\r\n       <strong>{capitalize(props.alert.type)} </strong>:  {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './TextForm';\n\nimport { useState } from 'react';\nimport Alert from './Alert';\nimport React from \"react\";\n\n\nfunction App() {\n\n  const [mode, SetMode] = useState(\"light\");\n\n  const toggleMode =()=>{\n    if(mode==='dark'){\n      SetMode(\"light\")\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"The Light Mode Activated\", \"success\")\n\n    }else{\n      SetMode(\"dark\")\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"The Dark Mode Activated\", \"success\")\n    }\n  }\n\n  const [alert, SetAlertMode] = useState(null);\n\nconst showAlert = (message , type) =>{\n  SetAlertMode({\n    msg : message,\n    type: type\n})\nsetTimeout(()=>{\n  SetAlertMode(null)\n},1500)\n}\n\n\n  return (   \n\n    <div className=\"App\">         \n      <Navbar title=\"WEB Developer\" menu='About Us' mode={mode} toggleMode={toggleMode} ></Navbar>\n      <Alert alert={alert} /> \n        <div className='container'>   \n        <TextForm heading='Entre the text to Analyze'  mode={mode} showAlert = {showAlert}/>   \n        </div>\n  \n    </div>\n          \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}